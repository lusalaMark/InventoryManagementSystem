<div class="form-group">
    <label for="search">@Label</label>
    <input type="text" class="form-control" value="@_userInput" @oninput="@(async (args) => {await OnInput(args);})" @onkeyup="OnPressKeys" />
    <span></span>
</div>

@if (searchResults != null && searchResults.Count > 0)
{
    <div class="search-result">

        <div class="table-wrapper-scroll-y customScrollbar" style="height:99%;  overflow:scroll;" id="table">

        <table class="table table-condensed table-bordered table-striped table-hover w-auto fixed_header ">

            <thead class="bg-info" style="position: sticky;top:0"> 
                <tr class="noBorder">
                     <th>Description</th>
                </tr> 
            </thead>

            <tbody>

                @foreach (var item in searchResults)
                {
                    int itemIndex = 0;
                    <tr @key="item.Id" class="@(itemIndex == currentItemIndex?"selected":"") noBorder" @onclick="@(()=>OnSelectItem(item))">
                            <td>@item.Name</td>
                    </tr>
                    itemIndex++;
                }

            </tbody>

        </table>

    </div>
     

       @*  <ul>
            @{
                int itemIndex = 0;
                foreach (var item in searchResults)
                {
                    <li >
                        @item.Name
                    </li>
                    itemIndex++;
                }
            }
        </ul> *@
         
    </div>
}

@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public Func<string, Task<List<ItemViewModel>>>? SearchFunction { get; set; }

    [Parameter]
    public EventCallback<ItemViewModel> OnItemSelected { get; set; }

    private List<ItemViewModel>? searchResults = null;

    private ItemViewModel? selectedItem = null;

    private ItemViewModel? currentItem = null;
    private int currentItemIndex = -1;

    private string _userInput = string.Empty;

    private async Task OnInput(ChangeEventArgs args)
    {
        _userInput = args.Value?.ToString() ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(_userInput) && SearchFunction != null)
        {
            if (this.selectedItem?.Name != _userInput)
            {
                searchResults = await SearchFunction(_userInput);
                this.selectedItem = null;

                StateHasChanged();
            }
        }
        else
        {
            ClearCurrentItem();
        }
    }

    private async Task OnSelectItem(ItemViewModel? item)
    {
        ClearCurrentItem();

        if (item != null)
        {
            this.selectedItem = item;
            this._userInput = item.Name;
            await OnItemSelected.InvokeAsync(item);
        }
    }

    private void ClearCurrentItem()
    {
        searchResults = null;
        currentItem = null;
        currentItemIndex = -1;
    }

    private async Task OnPressKeys(KeyboardEventArgs e)
    {
        if ((e.Code == "ArrowDown" || e.Code == "ArrowUp") && searchResults != null && searchResults.Count > 0)
        {
            if (e.Code == "ArrowDown" && currentItemIndex < searchResults.Count - 1)
            {
                currentItem = searchResults[++currentItemIndex];
            }
            else if (e.Code == "ArrowUp")
            {
                if (currentItemIndex > 0)
                    currentItem = searchResults[--currentItemIndex];
                else
                {
                    currentItem = null;
                    currentItemIndex = -1;
                }
            }
        }
        else if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await OnSelectItem(currentItem);
        }
    }

    public class ItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
